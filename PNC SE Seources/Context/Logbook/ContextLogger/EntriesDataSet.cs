// © 2005 IDesign Inc. All rights reserved 
//Questions? Comments? go to 
//http://www.idesign.net

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.0.3617.0
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ContextLogger 
{
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class EntriesDataSet : DataSet {
        
        private EntriesDataTable tableEntries;
        
        public EntriesDataSet() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected EntriesDataSet(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Entries"] != null)) {
                    this.Tables.Add(new EntriesDataTable(ds.Tables["Entries"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public EntriesDataTable Entries {
            get {
                return this.tableEntries;
            }
        }
        
        public override DataSet Clone() {
            EntriesDataSet cln = ((EntriesDataSet)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Entries"] != null)) {
                this.Tables.Add(new EntriesDataTable(ds.Tables["Entries"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableEntries = ((EntriesDataTable)(this.Tables["Entries"]));
            if ((this.tableEntries != null)) {
                this.tableEntries.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "EntriesDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/EntriesDataSet.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableEntries = new EntriesDataTable();
            this.Tables.Add(this.tableEntries);
        }
        
        private bool ShouldSerializeEntries() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void EntriesRowChangeEventHandler(object sender, EntriesRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntriesDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnEntry;
            
            private DataColumn columnMemberAccessed;
            
            private DataColumn columnType;
            
            private DataColumn columnAssembly;
            
            private DataColumn columnDate;
            
            private DataColumn columnTime;
            
            private DataColumn columnMachine;
            
            private DataColumn columnAppDomain;
            
            private DataColumn columnThreadID;
            
            private DataColumn columnThreadName;
            
            private DataColumn columnContextID;
            
            private DataColumn columnUser;
            
            private DataColumn columnExceptionName;
            
            private DataColumn columnExceptionMessage;
            
            private DataColumn columnEvent;
            
            internal EntriesDataTable() : 
                    base("Entries") {
                this.InitClass();
            }
            
            internal EntriesDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn EntryColumn {
                get {
                    return this.columnEntry;
                }
            }
            
            internal DataColumn MemberAccessedColumn {
                get {
                    return this.columnMemberAccessed;
                }
            }
            
            internal DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            internal DataColumn AssemblyColumn {
                get {
                    return this.columnAssembly;
                }
            }
            
            internal DataColumn DateColumn {
                get {
                    return this.columnDate;
                }
            }
            
            internal DataColumn TimeColumn {
                get {
                    return this.columnTime;
                }
            }
            
            internal DataColumn MachineColumn {
                get {
                    return this.columnMachine;
                }
            }
            
            internal DataColumn AppDomainColumn {
                get {
                    return this.columnAppDomain;
                }
            }
            
            internal DataColumn ThreadIDColumn {
                get {
                    return this.columnThreadID;
                }
            }
            
            internal DataColumn ThreadNameColumn {
                get {
                    return this.columnThreadName;
                }
            }
            
            internal DataColumn ContextIDColumn {
                get {
                    return this.columnContextID;
                }
            }
            
            internal DataColumn UserColumn {
                get {
                    return this.columnUser;
                }
            }
            
            internal DataColumn ExceptionNameColumn {
                get {
                    return this.columnExceptionName;
                }
            }
            
            internal DataColumn ExceptionMessageColumn {
                get {
                    return this.columnExceptionMessage;
                }
            }
            
            internal DataColumn EventColumn {
                get {
                    return this.columnEvent;
                }
            }
            
            public EntriesRow this[int index] {
                get {
                    return ((EntriesRow)(this.Rows[index]));
                }
            }
            
            public event EntriesRowChangeEventHandler EntriesRowChanged;
            
            public event EntriesRowChangeEventHandler EntriesRowChanging;
            
            public event EntriesRowChangeEventHandler EntriesRowDeleted;
            
            public event EntriesRowChangeEventHandler EntriesRowDeleting;
            
            public void AddEntriesRow(EntriesRow row) {
                this.Rows.Add(row);
            }
            
            public EntriesRow AddEntriesRow(int Entry, string MemberAccessed, string Type, string Assembly, string Date, string Time, string Machine, string AppDomain, int ThreadID, string ThreadName, int ContextID, string User, string ExceptionName, string ExceptionMessage, string Event) {
                EntriesRow rowEntriesRow = ((EntriesRow)(this.NewRow()));
                rowEntriesRow.ItemArray = new object[] {
                        Entry,
                        MemberAccessed,
                        Type,
                        Assembly,
                        Date,
                        Time,
                        Machine,
                        AppDomain,
                        ThreadID,
                        ThreadName,
                        ContextID,
                        User,
                        ExceptionName,
                        ExceptionMessage,
                        Event};
                this.Rows.Add(rowEntriesRow);
                return rowEntriesRow;
            }
            
            public EntriesRow FindByEntry(int Entry) {
                return ((EntriesRow)(this.Rows.Find(new object[] {
                            Entry})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                EntriesDataTable cln = ((EntriesDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new EntriesDataTable();
            }
            
            internal void InitVars() {
                this.columnEntry = this.Columns["Entry"];
                this.columnMemberAccessed = this.Columns["MemberAccessed"];
                this.columnType = this.Columns["Type"];
                this.columnAssembly = this.Columns["Assembly"];
                this.columnDate = this.Columns["Date"];
                this.columnTime = this.Columns["Time"];
                this.columnMachine = this.Columns["Machine"];
                this.columnAppDomain = this.Columns["AppDomain"];
                this.columnThreadID = this.Columns["ThreadID"];
                this.columnThreadName = this.Columns["ThreadName"];
                this.columnContextID = this.Columns["ContextID"];
                this.columnUser = this.Columns["User"];
                this.columnExceptionName = this.Columns["ExceptionName"];
                this.columnExceptionMessage = this.Columns["ExceptionMessage"];
                this.columnEvent = this.Columns["Event"];
            }
            
            private void InitClass() {
                this.columnEntry = new DataColumn("Entry", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEntry);
                this.columnMemberAccessed = new DataColumn("MemberAccessed", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMemberAccessed);
                this.columnType = new DataColumn("Type", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnType);
                this.columnAssembly = new DataColumn("Assembly", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAssembly);
                this.columnDate = new DataColumn("Date", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnDate);
                this.columnTime = new DataColumn("Time", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnTime);
                this.columnMachine = new DataColumn("Machine", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnMachine);
                this.columnAppDomain = new DataColumn("AppDomain", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnAppDomain);
                this.columnThreadID = new DataColumn("ThreadID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnThreadID);
                this.columnThreadName = new DataColumn("ThreadName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnThreadName);
                this.columnContextID = new DataColumn("ContextID", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnContextID);
                this.columnUser = new DataColumn("User", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnUser);
                this.columnExceptionName = new DataColumn("ExceptionName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExceptionName);
                this.columnExceptionMessage = new DataColumn("ExceptionMessage", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnExceptionMessage);
                this.columnEvent = new DataColumn("Event", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnEvent);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnEntry}, true));
                this.columnEntry.AllowDBNull = false;
                this.columnEntry.Unique = true;
                this.columnMemberAccessed.AllowDBNull = false;
                this.columnType.AllowDBNull = false;
                this.columnAssembly.AllowDBNull = false;
                this.columnDate.AllowDBNull = false;
                this.columnTime.AllowDBNull = false;
                this.columnAppDomain.AllowDBNull = false;
                this.columnThreadID.AllowDBNull = false;
                this.columnContextID.AllowDBNull = false;
            }
            
            public EntriesRow NewEntriesRow() {
                return ((EntriesRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new EntriesRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(EntriesRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EntriesRowChanged != null)) {
                    this.EntriesRowChanged(this, new EntriesRowChangeEvent(((EntriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EntriesRowChanging != null)) {
                    this.EntriesRowChanging(this, new EntriesRowChangeEvent(((EntriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EntriesRowDeleted != null)) {
                    this.EntriesRowDeleted(this, new EntriesRowChangeEvent(((EntriesRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EntriesRowDeleting != null)) {
                    this.EntriesRowDeleting(this, new EntriesRowChangeEvent(((EntriesRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveEntriesRow(EntriesRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntriesRow : DataRow {
            
            private EntriesDataTable tableEntries;
            
            internal EntriesRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableEntries = ((EntriesDataTable)(this.Table));
            }
            
            public int Entry {
                get {
                    return ((int)(this[this.tableEntries.EntryColumn]));
                }
                set {
                    this[this.tableEntries.EntryColumn] = value;
                }
            }
            
            public string MemberAccessed {
                get {
                    return ((string)(this[this.tableEntries.MemberAccessedColumn]));
                }
                set {
                    this[this.tableEntries.MemberAccessedColumn] = value;
                }
            }
            
            public string Type {
                get {
                    return ((string)(this[this.tableEntries.TypeColumn]));
                }
                set {
                    this[this.tableEntries.TypeColumn] = value;
                }
            }
            
            public string Assembly {
                get {
                    return ((string)(this[this.tableEntries.AssemblyColumn]));
                }
                set {
                    this[this.tableEntries.AssemblyColumn] = value;
                }
            }
            
            public string Date {
                get {
                    return ((string)(this[this.tableEntries.DateColumn]));
                }
                set {
                    this[this.tableEntries.DateColumn] = value;
                }
            }
            
            public string Time {
                get {
                    return ((string)(this[this.tableEntries.TimeColumn]));
                }
                set {
                    this[this.tableEntries.TimeColumn] = value;
                }
            }
            
            public string Machine {
                get {
                    try {
                        return ((string)(this[this.tableEntries.MachineColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntries.MachineColumn] = value;
                }
            }
            
            public string AppDomain {
                get {
                    return ((string)(this[this.tableEntries.AppDomainColumn]));
                }
                set {
                    this[this.tableEntries.AppDomainColumn] = value;
                }
            }
            
            public int ThreadID {
                get {
                    return ((int)(this[this.tableEntries.ThreadIDColumn]));
                }
                set {
                    this[this.tableEntries.ThreadIDColumn] = value;
                }
            }
            
            public string ThreadName {
                get {
                    try {
                        return ((string)(this[this.tableEntries.ThreadNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntries.ThreadNameColumn] = value;
                }
            }
            
            public int ContextID {
                get {
                    return ((int)(this[this.tableEntries.ContextIDColumn]));
                }
                set {
                    this[this.tableEntries.ContextIDColumn] = value;
                }
            }
            
            public string User {
                get {
                    try {
                        return ((string)(this[this.tableEntries.UserColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntries.UserColumn] = value;
                }
            }
            
            public string ExceptionName {
                get {
                    try {
                        return ((string)(this[this.tableEntries.ExceptionNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntries.ExceptionNameColumn] = value;
                }
            }
            
            public string ExceptionMessage {
                get {
                    try {
                        return ((string)(this[this.tableEntries.ExceptionMessageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntries.ExceptionMessageColumn] = value;
                }
            }
            
            public string Event {
                get {
                    try {
                        return ((string)(this[this.tableEntries.EventColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEntries.EventColumn] = value;
                }
            }
            
            public bool IsMachineNull() {
                return this.IsNull(this.tableEntries.MachineColumn);
            }
            
            public void SetMachineNull() {
                this[this.tableEntries.MachineColumn] = System.Convert.DBNull;
            }
            
            public bool IsThreadNameNull() {
                return this.IsNull(this.tableEntries.ThreadNameColumn);
            }
            
            public void SetThreadNameNull() {
                this[this.tableEntries.ThreadNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserNull() {
                return this.IsNull(this.tableEntries.UserColumn);
            }
            
            public void SetUserNull() {
                this[this.tableEntries.UserColumn] = System.Convert.DBNull;
            }
            
            public bool IsExceptionNameNull() {
                return this.IsNull(this.tableEntries.ExceptionNameColumn);
            }
            
            public void SetExceptionNameNull() {
                this[this.tableEntries.ExceptionNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsExceptionMessageNull() {
                return this.IsNull(this.tableEntries.ExceptionMessageColumn);
            }
            
            public void SetExceptionMessageNull() {
                this[this.tableEntries.ExceptionMessageColumn] = System.Convert.DBNull;
            }
            
            public bool IsEventNull() {
                return this.IsNull(this.tableEntries.EventColumn);
            }
            
            public void SetEventNull() {
                this[this.tableEntries.EventColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class EntriesRowChangeEvent : EventArgs {
            
            private EntriesRow eventRow;
            
            private DataRowAction eventAction;
            
            public EntriesRowChangeEvent(EntriesRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public EntriesRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
